{
  "service": {
    "service": "Zombie",
    "serviceObject": {
      "name": "Zombie"
    },
    "provider": {
      "stage": "dev",
      "region": "eu-west-1",
      "variableSyntax": "\\${([ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "nodejs6.10",
      "memorySize": 512,
      "timeout": 30,
      "profile": "default",
      "role": "arn:aws:iam::505939746198:role/service-role/ApiRole",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          },
          "AuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ZombieAuthorizer-dev"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ZombieLogin-dev"
            }
          },
          "MeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ZombieMe-dev"
            }
          },
          "GetallmessagesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ZombieGetAllMessages-dev"
            }
          },
          "UpdateuserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ZombieUserUpdate-dev"
            }
          },
          "FriendsgetallLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ZombieFriendsGetAll-dev"
            }
          },
          "ContactgetrequestsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ZombieContactGetRequests-dev"
            }
          },
          "AuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Zombie/dev/1495937339073-2017-05-28T02:08:59.073Z/authorizer.zip"
              },
              "FunctionName": "ZombieAuthorizer-dev",
              "Handler": "authorize.handler",
              "MemorySize": 512,
              "Role": "arn:aws:iam::505939746198:role/service-role/ApiRole",
              "Runtime": "nodejs6.10",
              "Timeout": 30,
              "Description": "Login for aws hackaton"
            },
            "DependsOn": [
              "AuthorizerLogGroup"
            ]
          },
          "AuthorizerLambdaVersionypPMru6Cy60dAtlclpj0njCtXNELg8LMabf1i6jjnsc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizerLambdaFunction"
              },
              "CodeSha256": "ypPMru6Cy60dAtlclpj0njCtXNELg8LMabf1i6jjnsc=",
              "Description": "Login for aws hackaton"
            }
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Zombie/dev/1495937339073-2017-05-28T02:08:59.073Z/login.zip"
              },
              "FunctionName": "ZombieLogin-dev",
              "Handler": "login.handler",
              "MemorySize": 512,
              "Role": "arn:aws:iam::505939746198:role/service-role/ApiRole",
              "Runtime": "nodejs6.10",
              "Timeout": 30,
              "Description": "Login for aws hackaton"
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "LoginLambdaVersionrVYL2e0fjXRuaTPx1CP2AjgcxFjMRd4QzqVBOCmwVJI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "rVYL2e0fjXRuaTPx1CP2AjgcxFjMRd4QzqVBOCmwVJI=",
              "Description": "Login for aws hackaton"
            }
          },
          "MeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Zombie/dev/1495937339073-2017-05-28T02:08:59.073Z/me.zip"
              },
              "FunctionName": "ZombieMe-dev",
              "Handler": "me.handler",
              "MemorySize": 512,
              "Role": "arn:aws:iam::505939746198:role/service-role/ApiRole",
              "Runtime": "nodejs6.10",
              "Timeout": 30,
              "Description": "Resolving user profile"
            },
            "DependsOn": [
              "MeLogGroup"
            ]
          },
          "MeLambdaVersionR0FC4xZ9yEmVE7coQ6udk9Vf5ltoATOEs4qAwlMtuw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MeLambdaFunction"
              },
              "CodeSha256": "R0FC4xZ9yEmVE7coQ6udk9Vf5ltoATOEs4+qAwlMtuw=",
              "Description": "Resolving user profile"
            }
          },
          "GetallmessagesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Zombie/dev/1495937339073-2017-05-28T02:08:59.073Z/getallmessages.zip"
              },
              "FunctionName": "ZombieGetAllMessages-dev",
              "Handler": "get-all-messages.handler",
              "MemorySize": 512,
              "Role": "arn:aws:iam::505939746198:role/service-role/ApiRole",
              "Runtime": "nodejs6.10",
              "Timeout": 30,
              "Description": "Resolving all messages"
            },
            "DependsOn": [
              "GetallmessagesLogGroup"
            ]
          },
          "GetallmessagesLambdaVersionhOVwsH814sgNOhYJDGUVifgq9TzQjB98jb7niAV7c4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetallmessagesLambdaFunction"
              },
              "CodeSha256": "hOVwsH814sgNOhYJDGUVifgq9TzQjB+98jb7niAV7c4=",
              "Description": "Resolving all messages"
            }
          },
          "UpdateuserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Zombie/dev/1495937339073-2017-05-28T02:08:59.073Z/updateuser.zip"
              },
              "FunctionName": "ZombieUserUpdate-dev",
              "Handler": "user_update.handler",
              "MemorySize": 512,
              "Role": "arn:aws:iam::505939746198:role/service-role/ApiRole",
              "Runtime": "nodejs6.10",
              "Timeout": 30,
              "Description": "Updating user profile"
            },
            "DependsOn": [
              "UpdateuserLogGroup"
            ]
          },
          "UpdateuserLambdaVersionRzThMkuxgmcwhDpC9QIvPl6N49FEpnMTc4GN2MvI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateuserLambdaFunction"
              },
              "CodeSha256": "RzThM+ku+xgmcwhDpC9QIvPl6N49FEpnMTc4GN2Mv/I=",
              "Description": "Updating user profile"
            }
          },
          "FriendsgetallLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Zombie/dev/1495937339073-2017-05-28T02:08:59.073Z/friendsgetall.zip"
              },
              "FunctionName": "ZombieFriendsGetAll-dev",
              "Handler": "friends-get-all.handler",
              "MemorySize": 512,
              "Role": "arn:aws:iam::505939746198:role/service-role/ApiRole",
              "Runtime": "nodejs6.10",
              "Timeout": 30,
              "Description": "Returns your friend profiles"
            },
            "DependsOn": [
              "FriendsgetallLogGroup"
            ]
          },
          "FriendsgetallLambdaVersionvp4uKMwE2T3EoIL6HgzyNnDdIEUMUIhK3Lni5KWZbHs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FriendsgetallLambdaFunction"
              },
              "CodeSha256": "vp4uKMwE2T3EoIL6HgzyNnDdIEUMUIhK3Lni5KWZbHs=",
              "Description": "Returns your friend profiles"
            }
          },
          "ContactgetrequestsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Zombie/dev/1495937339073-2017-05-28T02:08:59.073Z/contactgetrequests.zip"
              },
              "FunctionName": "ZombieContactGetRequests-dev",
              "Handler": "contactgetrequests.handler",
              "MemorySize": 512,
              "Role": "arn:aws:iam::505939746198:role/service-role/ApiRole",
              "Runtime": "nodejs6.10",
              "Timeout": 30,
              "Description": "Returns ids who wants to add you as a friend"
            },
            "DependsOn": [
              "ContactgetrequestsLogGroup"
            ]
          },
          "ContactgetrequestsLambdaVersionR6NThf9yo0c92o694sYCByEIUoTXlYIAkNRiTXsHUs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ContactgetrequestsLambdaFunction"
              },
              "CodeSha256": "R6NThf9yo0c92o694sYCByEIUoTX+lYIAkNRiTXsHUs=",
              "Description": "Returns ids who wants to add you as a friend"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-Zombie"
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMe": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "me",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashallDashmessages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-all-messages",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFriendsgetall": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "friendsgetall",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContactDashgetDashrequests": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contact-get-requests",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'AuthToken,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'AuthToken,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGetDashallDashmessagesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'AuthToken,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashallDashmessages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFriendsgetallOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'AuthToken,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFriendsgetall"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContactDashgetDashrequestsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'AuthToken,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactDashgetDashrequests"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodMeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodGetDashallDashmessagesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashallDashmessages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetallmessagesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodMePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateuserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodFriendsgetallGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFriendsgetall"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "FriendsgetallLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodContactDashgetDashrequestsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactDashgetDashrequests"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ContactgetrequestsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "AuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 600,
              "IdentitySource": "method.request.header.AuthToken",
              "Name": "authorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1495937339129": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodLoginPost",
              "ApiGatewayMethodMeGet",
              "ApiGatewayMethodGetDashallDashmessagesPost",
              "ApiGatewayMethodMePost",
              "ApiGatewayMethodFriendsgetallGet",
              "ApiGatewayMethodContactDashgetDashrequestsGet"
            ]
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "GetallmessagesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetallmessagesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateuserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateuserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FriendsgetallLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FriendsgetallLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ContactgetrequestsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ContactgetrequestsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "AuthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizerLambdaVersionypPMru6Cy60dAtlclpj0njCtXNELg8LMabf1i6jjnsc"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionrVYL2e0fjXRuaTPx1CP2AjgcxFjMRd4QzqVBOCmwVJI"
            }
          },
          "MeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MeLambdaVersionR0FC4xZ9yEmVE7coQ6udk9Vf5ltoATOEs4qAwlMtuw"
            }
          },
          "GetallmessagesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetallmessagesLambdaVersionhOVwsH814sgNOhYJDGUVifgq9TzQjB98jb7niAV7c4"
            }
          },
          "UpdateuserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateuserLambdaVersionRzThMkuxgmcwhDpC9QIvPl6N49FEpnMTc4GN2MvI"
            }
          },
          "FriendsgetallLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FriendsgetallLambdaVersionvp4uKMwE2T3EoIL6HgzyNnDdIEUMUIhK3Lni5KWZbHs"
            }
          },
          "ContactgetrequestsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ContactgetrequestsLambdaVersionR6NThf9yo0c92o694sYCByEIUoTXlYIAkNRiTXsHUs"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.eu-west-1.amazonaws.com/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-plugin-webpack"
    ],
    "functions": {
      "authorizer": {
        "handler": "authorize.handler",
        "name": "ZombieAuthorizer-dev",
        "description": "Login for aws hackaton",
        "events": [],
        "package": {
          "include": [
            "authorize.js"
          ]
        },
        "artifact": "/Users/mark/Workspace/JS/Hackaton/core/.serverless/authorizer.zip",
        "vpc": {}
      },
      "login": {
        "handler": "login.handler",
        "name": "ZombieLogin-dev",
        "description": "Login for aws hackaton",
        "events": [
          {
            "http": {
              "path": "login",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "headers": [
                  "AuthToken",
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "login.js"
          ]
        },
        "artifact": "/Users/mark/Workspace/JS/Hackaton/core/.serverless/login.zip",
        "vpc": {}
      },
      "me": {
        "handler": "me.handler",
        "name": "ZombieMe-dev",
        "description": "Resolving user profile",
        "events": [
          {
            "http": {
              "path": "me",
              "method": "get",
              "authorizer": {
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 600,
                "identitySource": "method.request.header.AuthToken",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "headers": [
                  "AuthToken",
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "me.js"
          ]
        },
        "artifact": "/Users/mark/Workspace/JS/Hackaton/core/.serverless/me.zip",
        "vpc": {}
      },
      "getallmessages": {
        "handler": "get-all-messages.handler",
        "name": "ZombieGetAllMessages-dev",
        "description": "Resolving all messages",
        "events": [
          {
            "http": {
              "path": "get-all-messages",
              "method": "post",
              "authorizer": {
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 600,
                "identitySource": "method.request.header.AuthToken",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "headers": [
                  "AuthToken",
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "get-all-messages.js"
          ]
        },
        "artifact": "/Users/mark/Workspace/JS/Hackaton/core/.serverless/getallmessages.zip",
        "vpc": {}
      },
      "updateuser": {
        "handler": "user_update.handler",
        "name": "ZombieUserUpdate-dev",
        "description": "Updating user profile",
        "events": [
          {
            "http": {
              "path": "me",
              "method": "post",
              "authorizer": {
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 600,
                "identitySource": "method.request.header.AuthToken",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "headers": [
                  "AuthToken",
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "user_update.js"
          ]
        },
        "artifact": "/Users/mark/Workspace/JS/Hackaton/core/.serverless/updateuser.zip",
        "vpc": {}
      },
      "friendsgetall": {
        "handler": "friends-get-all.handler",
        "name": "ZombieFriendsGetAll-dev",
        "description": "Returns your friend profiles",
        "events": [
          {
            "http": {
              "path": "friendsgetall",
              "method": "get",
              "authorizer": {
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 600,
                "identitySource": "method.request.header.AuthToken",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "headers": [
                  "AuthToken",
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "friends-get-all.js"
          ]
        },
        "artifact": "/Users/mark/Workspace/JS/Hackaton/core/.serverless/friendsgetall.zip",
        "vpc": {}
      },
      "contactgetrequests": {
        "handler": "contactgetrequests.handler",
        "name": "ZombieContactGetRequests-dev",
        "description": "Returns ids who wants to add you as a friend",
        "events": [
          {
            "http": {
              "path": "contact-get-requests",
              "method": "get",
              "authorizer": {
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 600,
                "identitySource": "method.request.header.AuthToken",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "headers": [
                  "AuthToken",
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {
          "include": [
            "contactgetrequests.js"
          ]
        },
        "artifact": "/Users/mark/Workspace/JS/Hackaton/core/.serverless/contactgetrequests.zip",
        "vpc": {}
      }
    }
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/Zombie/dev/1495937339073-2017-05-28T02:08:59.073Z",
    "artifact": ""
  }
}